{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinity","useState","offset","setOffset","handlePrevClick","prev","length","handleNextClick","className","style","width","transform","transition","map","image","src","alt","type","onClick","App","state","handleInputChange","event","param","val","check","target","name","value","checked","setState","this","min","max","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e789ff0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinity: boolean,\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinity,\n}) => {\n  const [offset, setOffset] = useState(0);\n\n  const handlePrevClick = (prev: number) => {\n    if (prev >= 0 && infinity) {\n      return -(itemWidth * images.length) + itemWidth * frameSize;\n    }\n\n    if (prev < -(itemWidth * step)) {\n      return prev + step * itemWidth;\n    }\n\n    return 0;\n  };\n\n  const handleNextClick = (prev: number) => {\n    if (prev <= -(images.length * itemWidth) + itemWidth * frameSize\n      && infinity\n    ) {\n      return 0;\n    }\n\n    if (prev <= -(images.length * itemWidth) + itemWidth * (frameSize + step)) {\n      return -(images.length * itemWidth) + itemWidth * frameSize;\n    }\n\n    if (prev >= -(images.length * itemWidth) + itemWidth * frameSize) {\n      return prev - itemWidth * step;\n    }\n\n    return 0;\n  };\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: itemWidth * frameSize,\n      }}\n    >\n      <ul\n        className=\"Carousel__list\"\n        style={{\n          transform: `translateX(${offset}px)`,\n          transition: `transform ${animationDuration}ms`,\n        }}\n      >\n        {images.map(image => (\n          <li\n            key={image}\n          >\n            <img\n              src={image}\n              alt=\"img\"\n              width={itemWidth}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <button\n        type=\"button\"\n        onClick={() => (\n          setOffset(handlePrevClick)\n        )}\n      >\n        Prev\n      </button>\n      <button\n        type=\"button\"\n        data-cy=\"next\"\n        onClick={() => (\n          setOffset(handleNextClick)\n        )}\n      >\n        Next\n      </button>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[],\n  step: number,\n  frameSize: number,\n  animationDuration: number,\n  infinity: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinity: false,\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, checked } = event.target;\n\n    const changeState = (param: string, val: string, check: boolean) => {\n      if (name === 'infinity') {\n        return {\n          ...this.state,\n          [param]: check,\n        };\n      }\n\n      return {\n        ...this.state,\n        [param]: +val,\n      };\n    };\n\n    this.setState(changeState(name, value, checked));\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinity,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinity={infinity}\n        />\n\n        <div className=\"App__container\">\n          <label>\n            {'Step: '}\n            <input\n              min={1}\n              max={10}\n              name=\"step\"\n              value={step}\n              type=\"number\"\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <label>\n            {'Frame size: '}\n            <input\n              min={1}\n              max={images.length}\n              name=\"frameSize\"\n              value={frameSize}\n              type=\"number\"\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <label>\n            {'Item width: '}\n            <input\n              min={0}\n              max={500}\n              name=\"itemWidth\"\n              value={itemWidth}\n              type=\"number\"\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <label>\n            {'Animation duration: '}\n            <input\n              min={0}\n              max={3000}\n              name=\"animationDuration\"\n              value={animationDuration}\n              type=\"number\"\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <label>\n            {'Infinity: '}\n            <input\n              name=\"infinity\"\n              checked={infinity}\n              type=\"checkbox\"\n              onChange={this.handleInputChange}\n            />\n          </label>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}